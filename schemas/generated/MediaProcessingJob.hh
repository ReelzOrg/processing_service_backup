/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* This code was generated by avrogencpp 1.13.0-SNAPSHOT. Do not edit.*/

#ifndef MEDIAPROCESSINGJOB_HH_2288479948_H
#define MEDIAPROCESSINGJOB_HH_2288479948_H


#include <sstream>
#include <any>
#include <utility>
#include "avro/Specific.hh"
#include "avro/Encoder.hh"
#include "avro/Decoder.hh"

namespace xyz::virajdoshi::reelz {
struct MediaProcessingJob {
    // An array of s3 urls of media files to be processed
    std::vector<std::string > toProcessUrls;
    // The type of upload (image, video, story)
    std::string uploadType;
    // The id of the post to which the media belongs (uuid)
    std::string post_id;
    // The timestamp of the request
    int64_t timeStamp;
    // The trace id of the request
    std::string traceId;
    MediaProcessingJob() :
        toProcessUrls(std::vector<std::string >()),
        uploadType(std::string()),
        post_id(std::string()),
        timeStamp(int64_t()),
        traceId(std::string())
        { }
};

}
namespace avro {
template<> struct codec_traits<xyz::virajdoshi::reelz::MediaProcessingJob> {
    static void encode(Encoder& e, const xyz::virajdoshi::reelz::MediaProcessingJob& v) {
        avro::encode(e, v.toProcessUrls);
        avro::encode(e, v.uploadType);
        avro::encode(e, v.post_id);
        avro::encode(e, v.timeStamp);
        avro::encode(e, v.traceId);
    }
    static void decode(Decoder& d, xyz::virajdoshi::reelz::MediaProcessingJob& v) {
        if (avro::ResolvingDecoder *rd =
            dynamic_cast<avro::ResolvingDecoder *>(&d)) {
            const std::vector<size_t> fo = rd->fieldOrder();
            for (std::vector<size_t>::const_iterator it = fo.begin();
                it != fo.end(); ++it) {
                switch (*it) {
                case 0:
                    avro::decode(d, v.toProcessUrls);
                    break;
                case 1:
                    avro::decode(d, v.uploadType);
                    break;
                case 2:
                    avro::decode(d, v.post_id);
                    break;
                case 3:
                    avro::decode(d, v.timeStamp);
                    break;
                case 4:
                    avro::decode(d, v.traceId);
                    break;
                default:
                    break;
                }
            }
        } else {
            avro::decode(d, v.toProcessUrls);
            avro::decode(d, v.uploadType);
            avro::decode(d, v.post_id);
            avro::decode(d, v.timeStamp);
            avro::decode(d, v.traceId);
        }
    }
};

}
#endif
